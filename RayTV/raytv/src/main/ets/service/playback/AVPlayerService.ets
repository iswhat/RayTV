import Logger from '../../common/util/Logger';
import player from '@ohos.multimedia.player';

/**
 * 播放状态枚举
 */
export enum PlaybackStatus {
  IDLE = 'IDLE',
  INITIALIZED = 'INITIALIZED',
  PREPARING = 'PREPARING',
  PREPARED = 'PREPARED',
  PLAYING = 'PLAYING',
  PAUSED = 'PAUSED',
  STOPPED = 'STOPPED',
  COMPLETED = 'COMPLETED',
  ERROR = 'ERROR'
}

/**
 * 播放速度枚举
 */
export enum PlaybackSpeed {
  SLOWEST = 0.5,
  SLOW = 0.75,
  NORMAL = 1.0,
  FAST = 1.5,
  FASTEST = 2.0
}

/**
 * AVPlayerService接口
 */
export interface AVPlayerService {
  // 初始化播放器
  init(): Promise<void>;
  
  // 设置播放源
  setSource(source: string): Promise<void>;
  
  // 准备播放
  prepare(): Promise<void>;
  
  // 开始播放
  play(): Promise<void>;
  
  // 暂停播放
  pause(): Promise<void>;
  
  // 停止播放
  stop(): Promise<void>;
  
  // 跳转到指定位置
  seekTo(timeMs: number): Promise<void>;
  
  // 设置音量
  setVolume(volume: number): Promise<void>;
  
  // 设置静音
  setMute(mute: boolean): Promise<void>;
  
  // 设置播放速度
  setSpeed(speed: PlaybackSpeed): Promise<void>;
  
  // 获取当前播放位置
  getCurrentTime(): Promise<number>;
  
  // 获取总时长
  getDuration(): Promise<number>;
  
  // 获取播放状态
  getStatus(): PlaybackStatus;
  
  // 设置播放状态监听器
  onStatusChange(callback: (status: PlaybackStatus) => void): void;
  
  // 设置错误监听器
  onError(callback: (error: Error) => void): void;
  
  // 设置缓冲状态监听器
  onBufferUpdate(callback: (bufferingRate: number) => void): void;
  
  // 释放播放器资源
  release(): Promise<void>;
}

/**
 * AVPlayerService实现类
 * 基于HarmonyOS AVPlayer API实现媒体播放功能
 */
export class AVPlayerServiceImpl implements AVPlayerService {
  private readonly TAG: string = 'AVPlayerServiceImpl';
  private avPlayer: player.Player | null = null;
  private currentStatus: PlaybackStatus = PlaybackStatus.IDLE;
  private sourceUrl: string = '';
  private statusChangeCallback?: (status: PlaybackStatus) => void;
  private errorCallback?: (error: Error) => void;
  private bufferUpdateCallback?: (bufferingRate: number) => void;
  
  /**
   * 初始化播放器
   */
  public async init(): Promise<void> {
    try {
      // 创建播放器实例
      this.avPlayer = await player.createPlayer();
      
      // 设置状态监听
      this.setupPlayerListeners();
      
      this.updateStatus(PlaybackStatus.IDLE);
      Logger.info(this.TAG, 'AVPlayer initialized');
    } catch (error) {
      Logger.error(this.TAG, `Failed to initialize AVPlayer: ${error}`);
      throw error;
    }
  }
  
  /**
   * 设置播放源
   */
  public async setSource(source: string): Promise<void> {
    try {
      if (!this.avPlayer) {
        await this.init();
      }
      
      this.sourceUrl = source;
      await this.avPlayer.setSource(source);
      this.updateStatus(PlaybackStatus.INITIALIZED);
      Logger.info(this.TAG, `Source set: ${source}`);
    } catch (error) {
      Logger.error(this.TAG, `Failed to set source: ${error}`);
      this.updateStatus(PlaybackStatus.ERROR);
      throw error;
    }
  }
  
  /**
   * 准备播放
   */
  public async prepare(): Promise<void> {
    try {
      if (!this.avPlayer) {
        throw new Error('Player not initialized');
      }
      
      this.updateStatus(PlaybackStatus.PREPARING);
      await this.avPlayer.prepare();
      // 准备完成状态会在事件监听中更新
    } catch (error) {
      Logger.error(this.TAG, `Failed to prepare: ${error}`);
      this.updateStatus(PlaybackStatus.ERROR);
      throw error;
    }
  }
  
  /**
   * 开始播放
   */
  public async play(): Promise<void> {
    try {
      if (!this.avPlayer) {
        throw new Error('Player not initialized');
      }
      
      await this.avPlayer.play();
      // 播放状态会在事件监听中更新
    } catch (error) {
      Logger.error(this.TAG, `Failed to play: ${error}`);
      throw error;
    }
  }
  
  /**
   * 暂停播放
   */
  public async pause(): Promise<void> {
    try {
      if (!this.avPlayer) {
        throw new Error('Player not initialized');
      }
      
      await this.avPlayer.pause();
      this.updateStatus(PlaybackStatus.PAUSED);
      Logger.info(this.TAG, 'Playback paused');
    } catch (error) {
      Logger.error(this.TAG, `Failed to pause: ${error}`);
      throw error;
    }
  }
  
  /**
   * 停止播放
   */
  public async stop(): Promise<void> {
    try {
      if (!this.avPlayer) {
        throw new Error('Player not initialized');
      }
      
      await this.avPlayer.stop();
      this.updateStatus(PlaybackStatus.STOPPED);
      Logger.info(this.TAG, 'Playback stopped');
    } catch (error) {
      Logger.error(this.TAG, `Failed to stop: ${error}`);
      throw error;
    }
  }
  
  /**
   * 跳转到指定位置
   */
  public async seekTo(timeMs: number): Promise<void> {
    try {
      if (!this.avPlayer) {
        throw new Error('Player not initialized');
      }
      
      await this.avPlayer.seek(timeMs, player.SeekMode.Accurate);
      Logger.info(this.TAG, `Seeked to: ${timeMs}ms`);
    } catch (error) {
      Logger.error(this.TAG, `Failed to seek: ${error}`);
      throw error;
    }
  }
  
  /**
   * 设置音量
   */
  public async setVolume(volume: number): Promise<void> {
    try {
      if (!this.avPlayer) {
        throw new Error('Player not initialized');
      }
      
      // 确保音量在0-1之间
      const normalizedVolume = Math.max(0, Math.min(1, volume));
      await this.avPlayer.setVolume(normalizedVolume);
      Logger.info(this.TAG, `Volume set to: ${normalizedVolume}`);
    } catch (error) {
      Logger.error(this.TAG, `Failed to set volume: ${error}`);
      throw error;
    }
  }
  
  /**
   * 设置静音
   */
  public async setMute(mute: boolean): Promise<void> {
    try {
      if (!this.avPlayer) {
        throw new Error('Player not initialized');
      }
      
      await this.avPlayer.setMute(mute);
      Logger.info(this.TAG, `Mute set to: ${mute}`);
    } catch (error) {
      Logger.error(this.TAG, `Failed to set mute: ${error}`);
      throw error;
    }
  }
  
  /**
   * 设置播放速度
   */
  public async setSpeed(speed: PlaybackSpeed): Promise<void> {
    try {
      if (!this.avPlayer) {
        throw new Error('Player not initialized');
      }
      
      await this.avPlayer.setSpeed(speed);
      Logger.info(this.TAG, `Playback speed set to: ${speed}`);
    } catch (error) {
      Logger.error(this.TAG, `Failed to set speed: ${error}`);
      throw error;
    }
  }
  
  /**
   * 获取当前播放位置
   */
  public async getCurrentTime(): Promise<number> {
    try {
      if (!this.avPlayer) {
        throw new Error('Player not initialized');
      }
      
      const currentTime = await this.avPlayer.getCurrentTime();
      return currentTime;
    } catch (error) {
      Logger.error(this.TAG, `Failed to get current time: ${error}`);
      return 0;
    }
  }
  
  /**
   * 获取总时长
   */
  public async getDuration(): Promise<number> {
    try {
      if (!this.avPlayer) {
        throw new Error('Player not initialized');
      }
      
      const duration = await this.avPlayer.getDuration();
      return duration;
    } catch (error) {
      Logger.error(this.TAG, `Failed to get duration: ${error}`);
      return 0;
    }
  }
  
  /**
   * 获取播放状态
   */
  public getStatus(): PlaybackStatus {
    return this.currentStatus;
  }
  
  /**
   * 设置播放状态监听器
   */
  public onStatusChange(callback: (status: PlaybackStatus) => void): void {
    this.statusChangeCallback = callback;
    // 立即回调当前状态
    callback(this.currentStatus);
  }
  
  /**
   * 设置错误监听器
   */
  public onError(callback: (error: Error) => void): void {
    this.errorCallback = callback;
  }
  
  /**
   * 设置缓冲状态监听器
   */
  public onBufferUpdate(callback: (bufferingRate: number) => void): void {
    this.bufferUpdateCallback = callback;
  }
  
  /**
   * 释放播放器资源
   */
  public async release(): Promise<void> {
    try {
      if (this.avPlayer) {
        await this.avPlayer.release();
        this.avPlayer = null;
        this.updateStatus(PlaybackStatus.IDLE);
        Logger.info(this.TAG, 'Player released');
      }
    } catch (error) {
      Logger.error(this.TAG, `Failed to release player: ${error}`);
      throw error;
    }
  }
  
  /**
   * 设置播放器监听器
   */
  private setupPlayerListeners(): void {
    if (!this.avPlayer) return;
    
    // 状态变化监听
    this.avPlayer.on('stateChange', (state: number, reason?: number) => {
      Logger.info(this.TAG, `Player state changed: ${state}, reason: ${reason}`);
      
      switch (state) {
        case player.State.READY: // 准备就绪
          this.updateStatus(PlaybackStatus.PREPARED);
          break;
        case player.State.PLAYING:
          this.updateStatus(PlaybackStatus.PLAYING);
          break;
        case player.State.PAUSED:
          this.updateStatus(PlaybackStatus.PAUSED);
          break;
        case player.State.STOPPED:
          this.updateStatus(PlaybackStatus.STOPPED);
          break;
        case player.State.COMPLETED:
          this.updateStatus(PlaybackStatus.COMPLETED);
          break;
        case player.State.ERROR:
          this.updateStatus(PlaybackStatus.ERROR);
          if (this.errorCallback && reason) {
            this.errorCallback(new Error(`Player error: ${reason}`));
          }
          break;
      }
    });
    
    // 错误监听
    this.avPlayer.on('error', (error: number, errorMsg: string) => {
      Logger.error(this.TAG, `Player error: ${error}, message: ${errorMsg}`);
      this.updateStatus(PlaybackStatus.ERROR);
      if (this.errorCallback) {
        this.errorCallback(new Error(`Player error: ${errorMsg}`));
      }
    });
    
    // 缓冲更新监听
    this.avPlayer.on('bufferingChange', (bufferingRate: number) => {
      Logger.info(this.TAG, `Buffering rate: ${bufferingRate}%`);
      if (this.bufferUpdateCallback) {
        this.bufferUpdateCallback(bufferingRate);
      }
    });
  }
  
  /**
   * 更新播放状态并触发回调
   */
  private updateStatus(status: PlaybackStatus): void {
    this.currentStatus = status;
    if (this.statusChangeCallback) {
      this.statusChangeCallback(status);
    }
  }
}

/**
 * AVPlayerService单例
 */
export const AVPlayerServiceInstance: AVPlayerService = new AVPlayerServiceImpl();