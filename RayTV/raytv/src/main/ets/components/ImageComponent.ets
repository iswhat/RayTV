/**
 * 图片组件
 * 提供统一的图片加载、占位符和错误处理功能
 */
import { Component, Prop, State, EventHub, Event } from '@ohos/hypium';
import Logger from '../utils/Logger';

export interface ImageComponentOptions {
  /** 图片URL */
  src?: string;
  /** 占位图URL */
  placeholder?: string;
  /** 错误图URL */
  errorImage?: string;
  /** 图片宽度 */
  width?: number | string;
  /** 图片高度 */
  height?: number | string;
  /** 图片模式 */
  mode?: ImageMode;
  /** 是否启用懒加载 */
  lazyLoad?: boolean;
  /** 是否显示加载状态 */
  showLoading?: boolean;
  /** 自定义样式 */
  style?: object;
}

/**
 * 图片模式枚举
 */
export enum ImageMode {
  /** 保持原图比例，可能会有留白 */
  ASPECT_FIT,
  /** 保持原图比例，可能会裁剪 */
  ASPECT_FILL,
  /** 拉伸填充整个容器 */
  FILL,
  /** 裁剪并居中显示 */
  CROP_CENTER,
  /** 保持原图大小 */
  ORIGINAL
}

@Component
class ImageComponent {
  private static readonly TAG = 'ImageComponent';
  
  @Prop private src?: string;
  @Prop private placeholder?: string = '/common/images/placeholder.png';
  @Prop private errorImage?: string = '/common/images/error.png';
  @Prop private width?: number | string = '100%';
  @Prop private height?: number | string = '100%';
  @Prop private mode?: ImageMode = ImageMode.ASPECT_FIT;
  @Prop private lazyLoad?: boolean = true;
  @Prop private showLoading?: boolean = true;
  @Prop private style?: object = {};
  
  @State private isLoading: boolean = false;
  @State private loadFailed: boolean = false;
  @State private currentImage: string = '';
  
  private observer?: IntersectionObserver;
  private isVisible: boolean = false;
  
  /**
   * 组件生命周期 - 组件挂载后
   */
  aboutToAppear() {
    Logger.debug(this.TAG, 'About to appear');
    
    // 初始化显示占位图
    this.currentImage = this.placeholder || '';
    
    // 如果不是懒加载，直接加载图片
    if (!this.lazyLoad) {
      this.loadImage();
    } else {
      // 设置交叉观察器用于懒加载
      this.setupIntersectionObserver();
    }
  }
  
  /**
   * 组件生命周期 - 组件卸载前
   */
  aboutToDisappear() {
    Logger.debug(this.TAG, 'About to disappear');
    
    // 清理观察器
    if (this.observer) {
      this.observer.disconnect();
      this.observer = undefined;
    }
  }
  
  /**
   * 设置交叉观察器
   */
  private setupIntersectionObserver() {
    try {
      // 在实际环境中，需要使用平台提供的交叉观察器API
      // 这里是概念性实现
      const element = this.$element();
      if (element) {
        // 模拟交叉观察器
        this.observer = new IntersectionObserver(entries => {
          entries.forEach(entry => {
            if (entry.isIntersecting && !this.isVisible) {
              this.isVisible = true;
              this.loadImage();
              
              // 加载完成后可以停止观察
              if (this.observer) {
                this.observer.unobserve(element);
              }
            }
          });
        });
        
        this.observer.observe(element);
      }
    } catch (error) {
      Logger.error(this.TAG, `Setup intersection observer error: ${error}`);
      // 失败时直接加载图片
      this.loadImage();
    }
  }
  
  /**
   * 加载图片
   */
  private loadImage() {
    if (!this.src) {
      Logger.warn(this.TAG, 'No image source provided');
      this.loadFailed = true;
      this.isLoading = false;
      this.currentImage = this.errorImage || '';
      return;
    }
    
    Logger.debug(this.TAG, `Loading image: ${this.src}`);
    
    this.isLoading = true;
    this.loadFailed = false;
    
    // 模拟图片加载过程
    // 在实际环境中，需要使用平台提供的图片加载API
    const image = new Image();
    
    image.onload = () => {
      Logger.debug(this.TAG, `Image loaded successfully: ${this.src}`);
      this.isLoading = false;
      this.currentImage = this.src!;
    };
    
    image.onerror = () => {
      Logger.error(this.TAG, `Failed to load image: ${this.src}`);
      this.isLoading = false;
      this.loadFailed = true;
      this.currentImage = this.errorImage || '';
    };
    
    // 设置图片源
    image.src = this.src;
    
    // 模拟加载超时
    setTimeout(() => {
      if (this.isLoading) {
        Logger.warn(this.TAG, `Image loading timeout: ${this.src}`);
        this.isLoading = false;
        this.loadFailed = true;
        this.currentImage = this.errorImage || '';
      }
    }, 10000); // 10秒超时
  }
  
  /**
   * 重试加载图片
   */
  private retryLoad() {
    Logger.debug(this.TAG, `Retrying to load image: ${this.src}`);
    this.loadImage();
  }
  
  /**
   * 计算图片模式
   */
  private getImageMode(): string {
    switch (this.mode) {
      case ImageMode.ASPECT_FIT:
        return 'aspectFit';
      case ImageMode.ASPECT_FILL:
        return 'aspectFill';
      case ImageMode.FILL:
        return 'fill';
      case ImageMode.CROP_CENTER:
        return 'cropCenter';
      case ImageMode.ORIGINAL:
        return 'original';
      default:
        return 'aspectFit';
    }
  }
  
  /**
   * 构建组件样式
   */
  private buildStyle(): object {
    return {
      width: this.width,
      height: this.height,
      ...this.style,
    };
  }
  
  /**
   * 渲染加载指示器
   */
  private renderLoadingIndicator() {
    if (this.isLoading && this.showLoading) {
      return (
        <div class="loading-indicator">
          {/* 这里可以使用平台提供的加载组件 */}
          <text>加载中...</text>
        </div>
      );
    }
    return null;
  }
  
  /**
   * 组件渲染
   */
  render() {
    return (
      <div class="image-component-container" style={this.buildStyle()}>
        <image
          src={this.currentImage}
          mode={this.getImageMode()}
          onclick={() => this.loadFailed && this.retryLoad()}
        />
        {this.renderLoadingIndicator()}
      </div>
    );
  }
}

export default ImageComponent;