import { useState, useEffect, onMounted, onUnmounted } from '@ohos/base';
import { ScrollView, Text, Button, List, ListItem, Image, LoadingProgress, Empty, Flex, Tag, Checkbox } from '@ohos/base/ui';
import { Router } from '@ohos/router';
import { favoriteService } from '../service/media/FavoriteService';
import { mediaService } from '../service/media/MediaService';
import Logger from '@ohos/base/Logger';

/**
 * 收藏页面组件
 * 实现收藏媒体的展示、管理、编辑等功能
 */
@Component
struct FavoritesPage {
  private readonly TAG: string = 'FavoritesPage';
  
  // 状态管理
  @State favorites: FavoriteItem[] = [];
  @State mediaItems: Map<string, MediaItem> = new Map();
  @State isLoading: boolean = false;
  @State errorMessage: string = '';
  @State isEditMode: boolean = false;
  @State selectedItems: Set<string> = new Set();
  @State isRefreshing: boolean = false;
  @State sortBy: 'time' | 'title' = 'time';
  
  // 初始化
  onMounted(() => {
    Logger.info(this.TAG, 'FavoritesPage mounted');
    this.loadFavorites();
  });
  
  // 清理资源
  onUnmounted(() => {
    Logger.info(this.TAG, 'FavoritesPage unmounted');
  });
  
  /**
   * 加载收藏列表
   */
  private async loadFavorites(): Promise<void> {
    this.isLoading = true;
    this.errorMessage = '';
    
    try {
      // 从收藏服务获取收藏列表
      let favorites = await favoriteService.getFavorites();
      
      // 根据排序方式排序
      if (this.sortBy === 'time') {
        favorites.sort((a, b) => {
          return new Date(b.addTime).getTime() - new Date(a.addTime).getTime();
        });
      } else if (this.sortBy === 'title') {
        favorites.sort((a, b) => {
          const titleA = this.mediaItems.get(a.id)?.title || a.title;
          const titleB = this.mediaItems.get(b.id)?.title || b.title;
          return titleA.localeCompare(titleB);
        });
      }
      
      this.favorites = favorites;
      
      // 加载媒体详情
      await this.loadMediaDetails(favorites);
      
      Logger.info(this.TAG, `Loaded ${this.favorites.length} favorites`);
    } catch (error) {
      Logger.error(this.TAG, `Failed to load favorites: ${error}`);
      this.errorMessage = '加载收藏失败，请稍后重试';
    } finally {
      this.isLoading = false;
      this.isRefreshing = false;
    }
  }
  
  /**
   * 加载媒体详情
   */
  private async loadMediaDetails(favorites: FavoriteItem[]): Promise<void> {
    try {
      // 并行加载媒体详情
      const detailPromises = favorites.map(async (fav) => {
        try {
          const media = await mediaService.getMediaDetail(fav.id, fav.siteKey);
          if (media) {
            this.mediaItems.set(fav.id, media);
          }
        } catch (error) {
          Logger.warn(this.TAG, `Failed to load detail for ${fav.id}: ${error}`);
          // 如果加载失败，使用收藏项中的基础信息
          const placeholderMedia: MediaItem = {
            id: fav.id,
            siteKey: fav.siteKey,
            title: fav.title,
            coverUrl: fav.coverUrl,
            type: fav.type,
            year: fav.year,
            description: '',
            score: '',
            directors: [],
            actors: [],
            tags: [],
            category: '',
            region: '',
            language: '',
            updateTime: '',
            status: ''
          };
          this.mediaItems.set(fav.id, placeholderMedia);
        }
      });
      
      await Promise.all(detailPromises);
    } catch (error) {
      Logger.error(this.TAG, `Failed to load media details: ${error}`);
    }
  }
  
  /**
   * 处理返回
   */
  private handleBack(): void {
    Router.back();
  }
  
  /**
   * 处理编辑模式切换
   */
  private toggleEditMode(): void {
    this.isEditMode = !this.isEditMode;
    this.selectedItems.clear();
  }
  
  /**
   * 处理项目选择
   */
  private handleItemSelect(favoriteId: string): void {
    if (this.selectedItems.has(favoriteId)) {
      this.selectedItems.delete(favoriteId);
    } else {
      this.selectedItems.add(favoriteId);
    }
  }
  
  /**
   * 处理全选/取消全选
   */
  private handleSelectAll(): void {
    if (this.selectedItems.size === this.favorites.length) {
      this.selectedItems.clear();
    } else {
      this.selectedItems = new Set(this.favorites.map(item => item.id));
    }
  }
  
  /**
   * 处理删除选中项
   */
  private async handleDeleteSelected(): Promise<void> {
    if (this.selectedItems.size === 0) return;
    
    try {
      const idsToDelete = Array.from(this.selectedItems);
      
      // 删除选中的收藏项
      await favoriteService.removeFavorites(idsToDelete);
      
      // 更新本地状态
      this.favorites = this.favorites.filter(fav => !idsToDelete.includes(fav.id));
      idsToDelete.forEach(id => {
        this.mediaItems.delete(id);
        this.selectedItems.delete(id);
      });
      
      Logger.info(this.TAG, `Deleted ${idsToDelete.length} favorites`);
      
      // 如果没有收藏项了，退出编辑模式
      if (this.favorites.length === 0) {
        this.isEditMode = false;
      }
    } catch (error) {
      Logger.error(this.TAG, `Failed to delete favorites: ${error}`);
      this.errorMessage = '删除失败，请稍后重试';
    }
  }
  
  /**
   * 处理媒体项点击
   */
  private handleMediaClick(favorite: FavoriteItem): void {
    if (this.isEditMode) {
      this.handleItemSelect(favorite.id);
      return;
    }
    
    Logger.info(this.TAG, `Favorite clicked: ${favorite.title}`);
    // 跳转到详情页
    Router.push({
      url: 'pages/MediaDetailPage',
      params: {
        mediaId: favorite.id,
        siteKey: favorite.siteKey
      }
    });
  }
  
  /**
   * 处理排序方式切换
   */
  private handleSortChange(): void {
    this.sortBy = this.sortBy === 'time' ? 'title' : 'time';
    this.loadFavorites();
  }
  
  /**
   * 处理刷新
   */
  private handleRefresh(): void {
    this.isRefreshing = true;
    this.mediaItems.clear();
    this.loadFavorites();
  }
  
  /**
   * 渲染头部
   */
  @Builder
  private renderHeader(): void {
    <Stack className="header">
      <Button className="back-button" onClick={this.handleBack}>
        ←
      </Button>
      <Text className="page-title">我的收藏</Text>
      <Button className="action-button" onClick={this.toggleEditMode}>
        {this.isEditMode ? '取消' : '编辑'}
      </Button>
    </Stack>
  }
  
  /**
   * 渲染编辑工具栏
   */
  @Builder
  private renderEditToolbar(): void {
    if (!this.isEditMode || this.favorites.length === 0) return;
    
    <Flex className="edit-toolbar">
      <Flex className="select-all">
        <Checkbox
          checked={this.selectedItems.size === this.favorites.length && this.favorites.length > 0}
          onCheckChange={this.handleSelectAll}
        />
        <Text>全选</Text>
      </Flex>
      <Text className="selected-count">
        已选择 {this.selectedItems.size} 项
      </Text>
      <Button
        className="delete-button"
        onClick={this.handleDeleteSelected}
        disabled={this.selectedItems.size === 0}
      >
        删除
      </Button>
    </Flex>
  }
  
  /**
   * 渲染排序选项
   */
  @Builder
  private renderSortOption(): void {
    if (this.isEditMode || this.favorites.length === 0) return;
    
    <Flex className="sort-option">
      <Text>排序：</Text>
      <Button
        className={`sort-button ${this.sortBy === 'time' ? 'selected' : ''}`}
        onClick={() => {
          this.sortBy = 'time';
          this.loadFavorites();
        }}
      >
        时间
      </Button>
      <Button
        className={`sort-button ${this.sortBy === 'title' ? 'selected' : ''}`}
        onClick={() => {
          this.sortBy = 'title';
          this.loadFavorites();
        }}
      >
        标题
      </Button>
    </Flex>
  }
  
  /**
   * 渲染收藏项
   */
  @Builder
  private renderFavoriteItem(favorite: FavoriteItem): void {
    const media = this.mediaItems.get(favorite.id);
    
    <ListItem onClick={() => this.handleMediaClick(favorite)}>
      <Flex className="favorite-item">
        {this.isEditMode && (
          <Checkbox
            checked={this.selectedItems.has(favorite.id)}
            onCheckChange={() => this.handleItemSelect(favorite.id)}
          />
        )}
        <Image
          src={media?.coverUrl || favorite.coverUrl || 'https://via.placeholder.com/120x160?text=No+Image'}
          className="media-cover"
          objectFit="cover"
        />
        <Flex className="media-info" direction="column">
          <Text className="media-title" numberOfLines={2}>
            {media?.title || favorite.title}
          </Text>
          <Flex className="media-meta">
            {favorite.type && <Tag className="meta-tag">{favorite.type}</Tag>}
            {favorite.year && <Tag className="meta-tag">{favorite.year}</Tag>}
            {media?.score && <Tag className="meta-tag score">{media.score}</Tag>}
          </Flex>
          <Text className="add-time">
            收藏时间: {new Date(favorite.addTime).toLocaleDateString()}
          </Text>
          {media?.description && (
            <Text className="media-description" numberOfLines={2}>
              {media.description}
            </Text>
          )}
        </Flex>
      </Flex>
    </ListItem>
  }
  
  /**
   * 渲染收藏列表
   */
  @Builder
  private renderFavoritesList(): void {
    if (this.isLoading && !this.isRefreshing) {
      <Stack className="loading-container">
        <LoadingProgress className="loading-progress" color="#FF4500" />
        <Text>加载中...</Text>
      </Stack>
      return;
    }
    
    if (this.errorMessage) {
      <Stack className="error-container">
        <Text className="error-icon">⚠️</Text>
        <Text className="error-message">{this.errorMessage}</Text>
        <Button className="retry-button" onClick={this.loadFavorites}>
          重试
        </Button>
      </Stack>
      return;
    }
    
    if (this.favorites.length === 0) {
      <Empty className="empty-container">
        <Text className="empty-icon">🌟</Text>
        <Text>暂无收藏内容</Text>
        <Button className="explore-button" onClick={() => Router.push({ url: 'pages/HomePage' })}>
          去探索
        </Button>
      </Empty>
      return;
    }
    
    <List
      className="favorites-list"
      itemTemplate={this.renderFavoriteItem}
      data={this.favorites}
      onRefresh={() => this.handleRefresh()}
      refreshing={this.isRefreshing}
    />
  }
  
  /**
   * 组件渲染
   */
  build() {
    <Stack className="favorites-page">
      {/* 页面头部 */}
      {this.renderHeader()}
      
      {/* 编辑工具栏 */}
      {this.renderEditToolbar()}
      
      {/* 排序选项 */}
      {this.renderSortOption()}
      
      {/* 收藏列表 */}
      <ScrollView className="content-scroll" scrollBar="auto">
        {this.renderFavoritesList()}
        <Blank className="bottom-space" />
      </ScrollView>
    </Stack>
  }
}

export default FavoritesPage;